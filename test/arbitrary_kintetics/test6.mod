TITLE Mod file for component: Component(id=test6 type=fooChannel)

COMMENT

    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.9.0
         org.neuroml.model   v1.9.0
         jLEMS               v0.10.7

ENDCOMMENT

NEURON {
    SUFFIX test6
    USEION k READ ek WRITE ik VALENCE 1 ? Assuming valence = 1; TODO check this!!
    
    RANGE gion                           
    RANGE gmax                              : Will be changed when ion channel mechanism placed on cell!
    RANGE gbar                              : parameter
    RANGE ek                                : parameter
    RANGE mgi                               : parameter
    RANGE conductance                       : parameter
    RANGE tau                               : parameter
    
    RANGE m_inf                             : exposure
    
    RANGE tau_m                             : exposure
    
    RANGE g                                 : exposure
    
    RANGE fopen                             : exposure
    RANGE double_m                          : derived variable
    
}

UNITS {
    
    (nA) = (nanoamp)
    (uA) = (microamp)
    (mA) = (milliamp)
    (A) = (amp)
    (mV) = (millivolt)
    (mS) = (millisiemens)
    (uS) = (microsiemens)
    (molar) = (1/liter)
    (kHz) = (kilohertz)
    (mM) = (millimolar)
    (um) = (micrometer)
    (umol) = (micromole)
    (S) = (siemens)
    
}

PARAMETER {
    
    gmax = 0  (S/cm2)                       : Will be changed when ion channel mechanism placed on cell!
    
    gbar = 0.01 (uS / um2)
    ek = -70 (mV)
    mgi = 0.001 (mM)
    conductance = 1.0E-5 (uS)
    tau = 6.28 (ms)
}

ASSIGNED {
    
    gion   (S/cm2)                          : Transient conductance density of the channel? Standard Assigned variables with ionChannel
    v (mV)
    celsius (degC)
    temperature (K)
    ek (mV)
    ik (mA/cm2)
    
    
    double_m : no units???                 : derived variable
    
    fopen : no units???                    : derived variable
    rate_m (/ms)
    
}

STATE {
    m  
    
}

INITIAL {
    temperature = celsius + 273.15
    
    rates()
    rates() ? To ensure correct initialisation.
    
    m = 7
    
}

BREAKPOINT {
    
    SOLVE states METHOD cnexp
    
    double_m = 2 *  m ? evaluable
    fopen = (1 +   mgi  ) /  double_m ? evaluable
    gion = gmax * fopen 
    
    ik = gion * (v - ek)
    
}

DERIVATIVE states {
    rates()
    m' = rate_m 
    
}

PROCEDURE rates() {
    
    rate_m = (  m   - 1) / 2 ? Note units of all quantities used here need to be consistent!
    
     
    
}

